<?php
namespace Magecomp\Instagramshoppable\Model;
use Magento\CatalogInventory\Model\Stock\StockItemRepository;
use Magento\ConfigurableProduct\Model\Product\Type\Configurable;
Use Magento\Catalog\Helper\Data as CatalogHelper;
use Magento\Directory\Model\Currency;
use Magento\Directory\Helper\Data as DirectoryHelper;
use Magento\Catalog\Model\ResourceModel\Category\CollectionFactory;
use Magento\Catalog\Model\ResourceModel\Product\CollectionFactory as ProductCollectionFactory;
use Magento\Store\Model\StoreManagerInterface;
use Magento\Eav\Model\Entity\Attribute;
use Magento\Eav\Model\Entity\Attribute\Source\Table;
use Magento\Framework\Filesystem;
use Magento\Framework\App\Filesystem\DirectoryList;
use Magento\Framework\Filesystem\Driver\File;
use Magento\Framework\Locale\Resolver;
use Magecomp\Instagramshoppable\Helper\Data;
use Psr\Log\LoggerInterface;
class Productfeed
{
    const ATTR_ID = 'id';
    const ATTR_TITLE = 'title';
    const ATTR_DESCRIPTION = 'description';
    const ATTR_LINK = 'link';
    const ATTR_IMAGE_LINK = 'image_link';
    const ATTR_BRAND = 'brand';
    const ATTR_CONDITION = 'condition';
    const ATTR_AVAILABILITY = 'availability';
    const ATTR_PRICE = 'price';
    const ATTR_GOOGLE_PRODUCT_CATEGORY = 'google_product_category';
    const ATTR_SHORT_DESCRIPTION = 'short_description';
    const ATTR_PRODUCT_TYPE = 'product_type';
    const ATTR_GENDER = 'gender';

    protected $_stockItemRepository;
    protected $_currencyModel;
    protected $storeManagerInterface;
    protected $configurableProductModel;
    protected $attributeModel;
    protected $attributeSourceTableModel;
    protected $catalogHelper;
    protected $directoryHelper;
    protected $categoryCollectionFactory;
    protected $productCollectionFactory;
    protected $fileSytem;
    protected $directoryList;
    protected $file;
    protected $helper;
    protected $localeResolver;
    protected $logger;

    public function __construct(StockItemRepository $stockItemRepository,Currency $currenyModel,
                                Configurable $configurableProductModel,
                                CatalogHelper $catalogHelper,
                                DirectoryHelper $directoryHelper,
                                CollectionFactory $collectionFactory,
                                ProductCollectionFactory $productCollectionFactory,
                                StoreManagerInterface $storeManagerInterface,
                                Attribute $attributeModel,
                                Table $attributeSourceTableModel,
                                File $file,
                                Filesystem $fileSystem,
                                DirectoryList $directoryList,
                                Data $helper,
                                Resolver $localeResolver,
                                LoggerInterface $logger)
    {
        $this->_stockItemRepository = $stockItemRepository;
        $this->configurableProductModel = $configurableProductModel;
        $this->_currencyModel = $currenyModel;
        $this->attributeModel = $attributeModel;
        $this->attributeSourceTableModel = $attributeSourceTableModel;
        $this->storeManagerInterface = $storeManagerInterface;
        $this->catalogHelper = $catalogHelper;
        $this->directoryHelper = $directoryHelper;
        $this->categoryCollectionFactory = $collectionFactory;
        $this->productCollectionFactory = $productCollectionFactory;
        $this->file = $file;
        $this->fileSytem = $fileSystem;
        $this->directoryList = $directoryList;
        $this->helper = $helper;
        $this->localeResolver = $localeResolver;
        $this->logger = $logger;
        $this->conversion_needed=false;
        $this->categoryNameMap=[];
        $this->store_id = $this->storeManagerInterface->getStore()->getId();

    }
    public function save()
    {
        $baseUrl = $this->storeManagerInterface->getStore()->getBaseUrl(\Magento\Framework\UrlInterface::URL_TYPE_MEDIA,['_secure' => true]);
        $feed_file_path = $baseUrl.'/';
        if ($this->file->isExists($feed_file_path) &&
            !$this->file->isWriteable($feed_file_path)) {
            $this->logger->info('Feed file is not writable');

            throw new \Exception(
                'File "%s" cannot be saved. Please make sure the path "%s" is '.
                'writable by web server.',
                $feed_file_path
            );

        }
        $this->logger->info('Generating Categories');
        $this->categoryNameMap = $this->generateCategoryNameMap();
        $this->logger->info('going to generate file:'.$this->getFileName());

        $directoryList = $this->directoryList;
        $media = $this->fileSytem->getDirectoryWrite($directoryList::MEDIA);

        $contents = $this->buildHeader()."\n";
        $media->writeFile($this->getFileName(),$contents);

        $this->store_id = $this->storeManagerInterface->getStore()->getId();

        $productCollection = $this->productCollectionFactory->create();
        $collection = $productCollection->addStoreFilter($this->store_id);
        $total_number_of_products = $collection->getSize();
        unset($collection);

        $this->writeProducts($media, $total_number_of_products, true);

        $footer = '';
        if ($footer) {
            $media->writeFile($this->getFileName(),$footer."\n");
        }
    }

    public function writeProducts($media, $total_number_of_products, $should_log)
    {
        $count = 0;
        $batch_max = 100;
        $locale_code =  $this->localeResolver->getLocale();
        $symbols = \Zend_Locale_Data::getList($locale_code, 'symbols');
        $this->group_separator = $symbols['group'];
        $this->decimal_separator = $symbols['decimal'];
        $this->conversion_needed = false;
        $skip_count = 0;
        $exception_count = 0;
        $this->storeManagerInterface->setCurrentStore($this->store_id);

        $this->store_url = $this->storeManagerInterface->getStore()->getBaseUrl(\Magento\Framework\UrlInterface::URL_TYPE_WEB,['_secure' => true]);

        $this->dedup_ids = array();

        $time_limit = (int) ini_get('max_execution_time');
        if ($time_limit !== 0 && $time_limit < 1800) {
            set_time_limit(1800);
        }
        while ($count < $total_number_of_products)
        {
            $this->logger->info(
                sprintf(
                    "Current Memory usage: %f M / %s",
                    memory_get_usage() / (1024.0 * 1024.0), // Value returned is in bytes
                    ini_get('memory_limit')));
            if ($should_log) {
                $this->logger->info(
                    sprintf(
                        "scanning products [%d -> %d)...\n",
                        $count,
                        ($count + $batch_max) >= $total_number_of_products ?
                            $total_number_of_products :
                            ($count + $batch_max)));
            }
            $products = $this->productCollectionFactory->create();
            $products->addAttributeToSelect('*')
                ->addStoreFilter()
                ->setPageSize($batch_max)
                ->setCurPage($count / $batch_max + 1)
                ->addUrlRewrite();
            foreach ($products as $product)
            {
                try {
                    $product_name = $product->getName();
                    $product_id = $product->getId();
                    if ($product->getVisibility() != \Magento\Catalog\Model\Product\Visibility::VISIBILITY_NOT_VISIBLE &&
                        $product->getStatus() == 1 &&
                        $product_name &&
                        $product_id &&
                        !isset($this->dedup_ids[$product_id])) {
                        $e = $this->buildProductEntry($product, $product_name);
                        $this->logger->info("loop ".$product_name);
                        $this->logger->info($e);
                        $media->writeFile($this->getFileName(),$e."\n","a+");
                    } else {
                        $skip_count++;
                    }
                } catch (\Exception $e) {
                    $exception_count++;
                    if ($exception_count <= 3) {
                        self::logException($e);
                    }
                    if ($exception_count > 100) {
                        $this->logger->info("Exception > 100",null,'fblog.log');
                        throw $e;
                    }
                }
                $product->clearInstance();
            }
            unset($products);
            $count += $batch_max;
        }

        if ($skip_count != 0) {
            $this->logger->info(sprintf('skipped %d products', $skip_count));
        }

        if ($exception_count != 0) {
            $this->logger->info("Exceptions in Feed Generation : ".$exception_count);
        }
    }

    public function generateCategoryNameMap()
    {
        $categories = $this->categoryCollectionFactory->create();
        $categories->addAttributeToSelect('name')
            ->addAttributeToSelect('path')
            ->addAttributeToSelect('is_active')
            ->addAttributeToFilter('is_active', 1);
        $name = array();
        $breadcrumb = array();
        foreach ($categories as $category)
        {
            $entity_id = $category->getId();
            $name[$entity_id] = $category->getName();
            $breadcrumb[$entity_id] = $category->getPath();
        }

        foreach ($name as $id => $value)
        {
            $breadcrumb[$id] = implode(" > ", array_filter(array_map(
                function ($inner_id) use (&$name) {
                    return isset($name[$inner_id]) ? $name[$inner_id] : null;
                },
                explode("/", $breadcrumb[$id])
            )));
        }
        return $breadcrumb;
    }

    public function isCurrencyConversionNeeded() {
        if ($this->group_separator !== ',' && $this->group_separator !== '.') {
            return true;
        } else if ($this->decimal_separator !== ',' &&
            $this->decimal_separator !== '.') {
            return true;
        } else {
            return false;
        }
    }
    public function buildProductEntry($product, $product_name) {
        $items = array();

        $stock = $this->_stockItemRepository->get($product->getId());
        $title = $product_name ? $product_name : $product->getName();
        $items[self::ATTR_ID] = $this->buildProductAttr(self::ATTR_ID, $product->getId());
        $this->dedup_ids[$product->getId()] = true;

        $items[self::ATTR_TITLE] = $this->buildProductAttr(self::ATTR_TITLE, $title);

        $description = $this->buildProductAttr(self::ATTR_DESCRIPTION, $product->getDescription());
        if (!$description) {
            $description = $this->buildProductAttr(self::ATTR_DESCRIPTION, $product->getShortDescription());
        }

        $items[self::ATTR_DESCRIPTION] = ($description) ? $description : $items[self::ATTR_TITLE];
        $items[self::ATTR_DESCRIPTION] = $this->lowercaseIfAllCaps($items[self::ATTR_DESCRIPTION]);

        $product_link = $product->getProductUrl();
        if (!$this->isValidUrl($product_link)) {
            $product_link = $this->store_url . $product_link;
        }
        $items[self::ATTR_LINK] = $this->buildProductAttr(self::ATTR_LINK, $product_link);

        $items[self::ATTR_IMAGE_LINK] = $this->buildProductAttr(self::ATTR_IMAGE_LINK, $this->getImageURL($product));

        $brand = null;
        $brand = $this->getCorrectText($product, self::ATTR_BRAND, 'brand');
        if (!$brand) {
            $brand = $this->getCorrectText($product, self::ATTR_BRAND, 'manufacturer');
        }
        $items[self::ATTR_BRAND] = ($brand) ? $brand : $this->defaultBrand();

        $condition = null;
        if ($product->getData('condition')) {
            $condition = $this->buildProductAttr(self::ATTR_CONDITION, $product->getAttributeText('condition'));
        }
        $items[self::ATTR_CONDITION] = ($this->isValidCondition($condition)) ? $condition : $this->defaultCondition();

        $items[self::ATTR_AVAILABILITY] = $this->buildProductAttr(self::ATTR_AVAILABILITY,
            $stock->getIsInStock() ? 'in stock' : 'out of stock');

        $price = $this->_currencyModel->formatPrecision(
            $this->getProductPrice($product), 2 ,
            array('display'=>\Zend_Currency::NO_SYMBOL),
            false);
        if ($this->conversion_needed) {
            $price = $this->convertCurrency($price);
        }

        $items[self::ATTR_PRICE] = $this->buildProductAttr('price',
            sprintf('%s %s',
                $this->stripCurrencySymbol($price),
                $this->storeManagerInterface->getStore($this->store_id)->getCurrentCurrencyCode()));

        $items[self::ATTR_SHORT_DESCRIPTION] = $this->buildProductAttr(self::ATTR_SHORT_DESCRIPTION,
            $product->getShortDescription());

        $items[self::ATTR_PRODUCT_TYPE] =
            $this->buildProductAttr(self::ATTR_PRODUCT_TYPE, $this->getCategoryPath($product));

        $items[self::ATTR_GOOGLE_PRODUCT_CATEGORY] =
            $this->buildProductAttr(self::ATTR_GOOGLE_PRODUCT_CATEGORY,
                $product->getData('google_product_category'));

        $gender = $this->getGenderInformation($product->getData('gender'));
        $items[self::ATTR_GENDER] = $this->buildProductAttr(self::ATTR_GENDER, $gender);

        return $items;
    }
    public function buildProductAttr($attribute, $value) {
        return $this->buildProductAttrText($attribute, $value);
    }
    public function buildProductAttrText($attr_name, $attr_value, $escapefn = null)
    {
        switch ($attr_name)
        {
            case self::ATTR_ID:
            case self::ATTR_LINK:
            case self::ATTR_IMAGE_LINK:
            case self::ATTR_IMAGE_LINK:
            case self::ATTR_CONDITION:
            case self::ATTR_AVAILABILITY:
            case self::ATTR_PRICE:
            case self::ATTR_GENDER:
                if ((bool)$attr_value) {
                    $attr_value = $escapefn ? $this->$escapefn($attr_value) : $attr_value;
                    return trim($attr_value);
                }
                break;
            case self::ATTR_BRAND:
                if ((bool)$attr_value) {
                    $attr_value = $escapefn ? $this->$escapefn($attr_value) : $attr_value;
                    $attr_value = trim($attr_value);
                    // brand max size: 70
                    if (mb_strlen($attr_value) > 70) {
                        $attr_value = mb_substr($attr_value, 0, 70);
                    }
                    return $attr_value;
                }
                break;
            case self::ATTR_TITLE:
                if ((bool)$attr_value) {
                    $attr_value = $this->processAttrValue($attr_value, $escapefn);
                    if (mb_strlen($attr_value) > 100) {
                        $attr_value = mb_substr($attr_value, 0, 100);
                    }
                    return $attr_value;
                }
                break;
            case self::ATTR_DESCRIPTION:
                if ((bool)$attr_value) {
                    $attr_value = $this->processAttrValue($attr_value, $escapefn);

                    if (mb_strlen($attr_value) > 5000) {
                        $attr_value = mb_substr($attr_value, 0, 5000);
                    }
                    return $attr_value;
                }
                break;
            case self::ATTR_GOOGLE_PRODUCT_CATEGORY:
                if ((bool)$attr_value) {
                    if (mb_strlen($attr_value) > 250) {
                        $attr_value = mb_substr($attr_value, 0, 250);
                    }
                    return $escapefn ? $this->$escapefn($attr_value) : $attr_value;
                }
                break;
            case self::ATTR_SHORT_DESCRIPTION:
                if ((bool)$attr_value) {
                    $attr_value = $this->processAttrValue($attr_value, $escapefn);
                    $attr_value = mb_strlen($attr_value) >= 1000 ?
                        mb_substr($attr_value, 0, 995).'...' :
                        $attr_value;
                    return $attr_value;
                }
                break;
            case self::ATTR_PRODUCT_TYPE:
                if ((bool)$attr_value) {
                    $attr_value = $this->processAttrValue($attr_value, $escapefn);
                    if (mb_strlen($attr_value) > 750) {
                        $attr_value = mb_substr($attr_value, mb_strlen($attr_value) - 750, 750);
                    }
                    return $attr_value;
                }
                break;
        }
        return '';
    }
    public function processAttrValue($attr_value, $escapefn)
    {
        $attr_value = $escapefn ? $this->$escapefn($attr_value) : $attr_value;
        $attr_value = strip_tags(html_entity_decode(($attr_value)));
        $attr_value = $escapefn ? $this->$escapefn($attr_value) : $attr_value;
        return trim($attr_value);
    }
    public function isValidUrl($product_link)
    {
        return filter_var($product_link, FILTER_VALIDATE_URL) ||
        mb_substr($product_link, 0, 4) === 'http';
    }
    public function lowercaseIfAllCaps($string)
    {
        if (!preg_match('/[a-z]/', $string)) {
            if (mb_strtoupper($string, 'utf-8') === $string) {
                return mb_strtolower($string, 'utf-8');
            }
        }
        return $string;
    }
    public function getCorrectText($product, $column, $attribute)
    {
        if ($product->getData($attribute)) {
            $text = $this->buildProductAttr($column, $product->getAttributeText($attribute));
            if (!$text) {
                $text = $this->buildProductAttr($column, $product->getData($attribute));
            }
            return $text;
        }
        return null;
    }
    public function isValidCondition($condition) {
        return ($condition &&
            ( $condition === 'new' ||
                $condition === 'used' ||
                $condition === 'refurbished')
        );
    }
    public function defaultCondition() {
        return $this->buildProductAttr(self::ATTR_CONDITION, 'new');
    }
    public function getProductPrice($product) {
        switch ($product->getTypeId()) {
            case 'configurable':
                $price = $this->getConfigurableProductPrice($product);
                break;
            case 'grouped':
                $price = $this->getGroupedProductPrice($product);
                break;
            case 'bundle':
                $price =  $this->getBundleProductPrice($product);
                break;
            default:
                $price = $this->getFinalPrice($product);
        }

        if (!isset($this->base_currency)) {
            $this->base_currency = $this->storeManagerInterface->getStore($this->store_id)->getBaseCurrencyCode();
        }
        if (!isset($this->current_currency)) {
            $this->current_currency = $this->storeManagerInterface->getStore($this->store_id)->getCurrentCurrencyCode();
        }
        if ($this->base_currency === $this->current_currency) {
            return $price;
        }

        if (!isset($this->currency_rate)) {
            $this->currency_rate =
                $this->_currencyModel->getCurrencyRates(
                    $this->base_currency, array($this->current_currency)
                );
            $this->currency_rate =
                is_array($this->currency_rate) ? end($this->currency_rate) : 0;
        }

        if (!$this->currency_rate || is_nan($this->currency_rate)) {
            $this->logger->info("ERROR : Currency Conversion Rate Is 0/Infinity.");
            throw new \Exception(
                "ERROR : Currency Conversion Rate Is 0/Infinity.\n".
                "Failed when converting ".$this->base_currency." to ".$this->current_currency.
                " getCurrencyRate() returned ".($this->currency_rate ?: " NULL")."\n".
                " This can be fixed by setting your currency rates in ".
                "Store > Currency > Currency Rates"
            );
        } else {
            return $this->directoryHelper->currencyConvert(
                $price,
                $this->base_currency,
                $this->current_currency
            );
        }
    }
    public function getConfigurableProductPrice($product)
    {
       /* if ($product->getFinalPrice() === 0)
        {
             $configurable = $this->configurableProductModel->setProduct($product);
            $simple_collection = $configurable->getUsedProductCollection()
                ->addAttributeToSelect('price')->addFilterByRequiredOptions();
            foreach ($simple_collection as $simple_product) {
                if ($simple_product->getPrice() > 0) {
                    return $this->getFinalPrice($simple_product);
                }
            }
        }*/
        return $this->getFinalPrice($product);
    }

    public function getBundleProductPrice($product) {
        return $product->getPriceModel()->getTotalPrices($product, 'min', 1, 1);
    }

    public function getGroupedProductPrice($product) {
        $assoc_products = $product->getTypeInstance(true)
            ->getAssociatedProductCollection($product)
            ->addAttributeToSelect('price')
            ->addAttributeToSelect('tax_class_id')
            ->addAttributeToSelect('tax_percent');

        $min_price = INF;
        foreach ($assoc_products as $assoc_product) {
            $min_price = min($min_price, $this->getFinalPrice($assoc_product));
        }
        return $min_price;
    }
    public function getFinalPrice($product, $price = null)
    {
        if ($price === null) {
            $price = $product->getFinalPrice();
        }
        if ($price === null) {
            $price = $product->getData('special_price');
        }
        return $this->catalogHelper->getTaxPrice($product, $price);
    }

    public function convertCurrency($price) {
        $price = str_replace($this->group_separator, '', $price);
        $price = str_replace($this->decimal_separator, '.', $price);
        return $price;
    }

    public function stripCurrencySymbol($price) {
        if (!isset($this->currency_strip_needed)) {
            $this->currency_strip_needed = !preg_match('/^[0-9,.]*$/', $price);
        }
        if ($this->currency_strip_needed) {
            return preg_replace('/[^0-9,.]/', '', $price);
        } else {
            return $price;
        }
    }
    public function getCategoryPath($product) {
        $category_names = array();
        $category_ids = $product->getCategoryIds();
        foreach ($category_ids as $category_id) {
            if (array_key_exists($category_id, $this->categoryNameMap)) {
                $category_names[] = $this->categoryNameMap[$category_id];
            }
        }
        return implode(" | ", $category_names);
    }

    public function getGenderInformation($gender_id) {
        if (!$gender_id) {
            return $gender_id;
        }

        if (!isset($this->gender_map)) {
            $this->gender_map = array();
        }

        if (isset($this->gender_map[$gender_id])) {
            return $this->gender_map[$gender_id];
        }

        $attribute_code = $this->attributeModel->getIdByCode('catalog_product', 'gender');
        $attribute = $this->attributeModel->load($attribute_code);

        $this->attributeSourceTableModel->setAttribute($attribute);
        $gender = $this->attributeSourceTableModel->getOptionText($gender_id);
        $gender = trim(strtolower($gender));

        if (!$gender) {
            return $gender;
        }

        if ($gender != 'male' && $gender != 'female') {
            $gender = 'unisex';
        }

        $this->gender_map[$gender_id] = $gender;
        return $gender;
    }

    public function getImageURL($product) {
        $image_url = null;
        $image = $product->getImage();
        if (!$image || $image === '' || $image === 'no_selection') {
            $product->load('media_gallery');
            $gal = $product->getMediaGalleryImages();
            if ($gal) {
                foreach ($gal as $gal_image) {
                    if ($gal_image['url'] && $gal_image['url'] !== '') {
                        $image_url = $gal_image['url'];
                        break;
                    }
                }
            }
        }
        if (!$image_url) {
            $baseUrl = $this->storeManagerInterface->getStore()->getBaseUrl(\Magento\Framework\UrlInterface::URL_TYPE_MEDIA,['_secure' => true]);
            $image_url = $baseUrl.'catalog/product'.$image;
        }
        return $image_url;
    }

    public function defaultBrand() {
        if (!isset($this->defaultBrand)) {
            $this->defaultBrand =
                $this->buildProductAttr(self::ATTR_BRAND, $this->storeManagerInterface->getStore()->getName());
        }
        return $this->defaultBrand;
    }

    public function getFileName() {
        return '';
    }
    public function getFullPath() {
        return $this->helper->getBaseMediaUrl().$this->getFileName();
    }
    public function getTargetFilePath($supportzip) {
        $feed_file_path = $this->getFullPath();
        return $supportzip ? $feed_file_path.'.gz' : $feed_file_path;
    }
    public function cacheIsStale($supportzip) {
        $file_path = $this->getTargetFilePath($supportzip);
        return $this->fileIsStale($file_path);
    }
    public function fileIsStale($file_path) {
        $time_file_modified = (file_exists($file_path)) ? filemtime($file_path) : 0;
        if (!$time_file_modified) {
            return true;
        } else {
            return $this->isStale($time_file_modified);
        }
    }
    public function isStale($time_file_modified) {
        return (!$time_file_modified || time() - $time_file_modified > 8*3600);
    }
    public function saveGZip() {
        $this->log(sprintf("generating gzip copy of %s ...", $this->getFileName()));
        $feed_file_path = $this->getFullPath();
        $gz_file_path = $feed_file_path.'.gz';
        $fp = gzopen($gz_file_path, 'w9');
        gzwrite($fp, file_get_contents($feed_file_path));
        gzclose($fp);
        $this->log("generated!");
    }
    public function log($info)
    {
        $this->logger->info($info);
    }
}